from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
queue = []  # –û—á–µ—Ä–µ–¥—å –∫—É—Ä—å–µ—Ä–æ–≤
ADMINS = []  # –°—é–¥–∞ –¥–æ–±–∞–≤—å—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id in ADMINS:
        keyboard.append([
            InlineKeyboardButton("–í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ", callback_data='call_next')
        ])
    
    keyboard.append([
        InlineKeyboardButton("–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data='join_queue'),
        InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data='refresh')
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥—å—é
    queue_list = "\n".join(
        [f"{i+1}. @{user['username']}" for i, user in enumerate(queue)]
    ) if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
    
    message = f"üöö –û—á–µ—Ä–µ–¥—å –∫—É—Ä—å–µ—Ä–æ–≤:\n{queue_list}"
    
    if update.message:
        update.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.callback_query.edit_message_text(message, reply_markup=reply_markup)

def button_click(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user = query.from_user
    
    if query.data == 'join_queue':
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        if not any(u['user_id'] == user.id for u in queue):
            queue.append({
                'user_id': user.id,
                'username': user.username
            })
            query.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!")
        else:
            query.answer("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!")
            
    elif query.data == 'call_next':
        # –í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        if user.id in ADMINS:
            if queue:
                next_user = queue.pop(0)
                context.bot.send_message(
                    chat_id=next_user['user_id'],
                    text="üöÄ –í–∞—Å –≤—ã–∑–≤–∞–ª–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–π–¥–∏—Ç–µ."
                )
                query.answer(f"–í—ã–∑–≤–∞–Ω @{next_user['username']}")
            else:
                query.answer("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")
        else:
            query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    start(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater("YOUR_BOT_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    
    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CallbackQueryHandler(button_click))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
